// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Square.Infrastructure.Persistence;

#nullable disable

namespace Square.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(SquareDbContext))]
    partial class SquareDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("domain")
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Square.Domain.CategoryAggregate.CategoryEntity.Category", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("_name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.HasIndex("_name")
                        .IsUnique()
                        .HasDatabaseName("ix_categories_name");

                    b.ToTable("categories", "domain");
                });

            modelBuilder.Entity("Square.Domain.ColumnAggregate.ColumnEntity.Column", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<long>("_authorId")
                        .HasColumnType("bigint")
                        .HasColumnName("author_id");

                    b.Property<long>("_topicId")
                        .HasColumnType("bigint")
                        .HasColumnName("topic_id");

                    b.HasKey("Id")
                        .HasName("pk_columns");

                    b.HasIndex("_topicId")
                        .HasDatabaseName("ix_columns__topic_id");

                    b.ToTable("columns", "domain");
                });

            modelBuilder.Entity("Square.Domain.TopicAggregate.TopicEntity.Topic", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<long>("_authorId")
                        .HasColumnType("bigint")
                        .HasColumnName("author_id");

                    b.Property<int>("_categoryId")
                        .HasColumnType("integer")
                        .HasColumnName("_category_id");

                    b.Property<string>("_title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_topics");

                    b.HasIndex("_categoryId")
                        .HasDatabaseName("ix_topics__category_id");

                    b.HasIndex("_title")
                        .IsUnique()
                        .HasDatabaseName("ix_topics__title");

                    b.ToTable("topics", "domain");
                });

            modelBuilder.Entity("Square.Domain.ColumnAggregate.ColumnEntity.Column", b =>
                {
                    b.HasOne("Square.Domain.TopicAggregate.TopicEntity.Topic", null)
                        .WithMany()
                        .HasForeignKey("_topicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_columns_topics__topic_id");

                    b.OwnsMany("Square.Domain.ColumnAggregate.ColumnEntity.ColumnLike", "_likes", b1 =>
                        {
                            b1.Property<long>("ColumnId")
                                .HasColumnType("bigint")
                                .HasColumnName("column_id");

                            b1.Property<long>("UserId")
                                .HasColumnType("bigint")
                                .HasColumnName("user_id");

                            b1.HasKey("ColumnId")
                                .HasName("pk_column_likes");

                            b1.ToTable("column_likes", "domain");

                            b1.WithOwner()
                                .HasForeignKey("ColumnId")
                                .HasConstraintName("fk_column_likes_columns_column_id");
                        });

                    b.Navigation("_likes");
                });

            modelBuilder.Entity("Square.Domain.TopicAggregate.TopicEntity.Topic", b =>
                {
                    b.HasOne("Square.Domain.CategoryAggregate.CategoryEntity.Category", null)
                        .WithMany()
                        .HasForeignKey("_categoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_topics_categories__category_id");

                    b.OwnsMany("Square.Domain.TopicAggregate.TopicEntity.TopicSubscribe", "_subscribers", b1 =>
                        {
                            b1.Property<long>("UserId")
                                .HasColumnType("bigint")
                                .HasColumnName("user_id");

                            b1.Property<long>("TopicId")
                                .HasColumnType("bigint")
                                .HasColumnName("topic_id");

                            b1.HasKey("UserId", "TopicId")
                                .HasName("pk_subscribers");

                            b1.HasIndex("TopicId")
                                .HasDatabaseName("ix_subscribers_topic_id");

                            b1.ToTable("subscribers", "domain");

                            b1.WithOwner()
                                .HasForeignKey("TopicId")
                                .HasConstraintName("fk_subscribers_topics_topic_id");
                        });

                    b.Navigation("_subscribers");
                });
#pragma warning restore 612, 618
        }
    }
}
