// <auto-generated />
using System;
using Account.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Account.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(AccountDbContext))]
    [Migration("20240218121225_Fix1")]
    partial class Fix1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Account.Domain.UserEntity.User", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("_email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<DateTime>("_loginAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("login_at");

                    b.Property<DateTime>("_registerAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("register_at");

                    b.Property<int[]>("_roles")
                        .IsRequired()
                        .HasColumnType("integer[]")
                        .HasColumnName("roles");

                    b.Property<string>("_username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("_email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.HasIndex("_username")
                        .IsUnique()
                        .HasDatabaseName("ix_users_username");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Account.Domain.UserEntity.User", b =>
                {
                    b.OwnsOne("Account.Domain.UserEntity.Password", "_password", b1 =>
                        {
                            b1.Property<long>("UserId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<byte[]>("_hash")
                                .IsRequired()
                                .HasColumnType("bytea")
                                .HasColumnName("password_hash");

                            b1.Property<byte[]>("_salt")
                                .IsRequired()
                                .HasColumnType("bytea")
                                .HasColumnName("password_salt");

                            b1.HasKey("UserId");

                            b1.ToTable("users");

                            b1.WithOwner()
                                .HasForeignKey("UserId")
                                .HasConstraintName("fk_users_users_id");
                        });

                    b.OwnsOne("Account.Domain.UserEntity.Profile", "_profile", b1 =>
                        {
                            b1.Property<long>("id")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<string>("_avatar")
                                .HasColumnType("text")
                                .HasColumnName("avatar");

                            b1.Property<string>("_biography")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("biography");

                            b1.Property<string>("_header")
                                .HasColumnType("text")
                                .HasColumnName("header");

                            b1.Property<string>("_nickname")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("nickname");

                            b1.Property<string>("_website")
                                .HasColumnType("text")
                                .HasColumnName("website");

                            b1.HasKey("id")
                                .HasName("pk_profiles");

                            b1.ToTable("profiles", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("id")
                                .HasConstraintName("fk_profiles_users_id");
                        });

                    b.Navigation("_password");

                    b.Navigation("_profile");
                });
#pragma warning restore 612, 618
        }
    }
}
