// <auto-generated />
using System;
using Account.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Account.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(AccountDbContext))]
    [Migration("20240218085135_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Account.Domain.RoleEntity.Role", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("_name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("Account.Domain.UserEntity.User", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("_email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<DateTime>("_loginAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("login_at");

                    b.Property<byte[]>("_passwordHash")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("password_hash");

                    b.Property<byte[]>("_passwordSalt")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("password_salt");

                    b.Property<DateTime>("_registerAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("register_at");

                    b.Property<string>("_username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("_email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.HasIndex("_username")
                        .IsUnique()
                        .HasDatabaseName("ix_users_username");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<int>("role_id")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<long>("user_id")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("role_id", "user_id")
                        .HasName("pk_user_role");

                    b.HasIndex("user_id")
                        .HasDatabaseName("ix_user_role_user_id");

                    b.ToTable("user_role", (string)null);
                });

            modelBuilder.Entity("Account.Domain.UserEntity.User", b =>
                {
                    b.OwnsOne("Account.Domain.UserEntity.Profile", "_profile", b1 =>
                        {
                            b1.Property<long>("id")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<string>("_avatar")
                                .HasColumnType("text")
                                .HasColumnName("avatar");

                            b1.Property<string>("_biography")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("biography");

                            b1.Property<string>("_header")
                                .HasColumnType("text")
                                .HasColumnName("header");

                            b1.Property<string>("_nickname")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("nickname");

                            b1.Property<string>("_website")
                                .HasColumnType("text")
                                .HasColumnName("website");

                            b1.HasKey("id")
                                .HasName("pk_profiles");

                            b1.ToTable("profiles", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("id")
                                .HasConstraintName("fk_profiles_users_id");
                        });

                    b.Navigation("_profile");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("Account.Domain.RoleEntity.Role", null)
                        .WithMany()
                        .HasForeignKey("role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_role_roles_role_id");

                    b.HasOne("Account.Domain.UserEntity.User", null)
                        .WithMany()
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_role_users_user_id");
                });
#pragma warning restore 612, 618
        }
    }
}
